#! /bin/sh
# Generated from testsuite.at by GNU Autoconf 2.69.
#
# Copyright (C) 2009-2012 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :

else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :

else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p

# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=no
# List of the tested programs.
at_tested='zdkimfilter'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;testsuite.at:274;test default parameters;;
2;testsuite.at:285;test integer overflow is caught;;
3;testsuite.at:302;test backslash for parameter line continuation;;
4;testsuite.at:315;Sign and verify my signature;;
5;testsuite.at:382;Sign with default domain;;
6;testsuite.at:406;Sign with default domain, selector given;;
7;testsuite.at:431;Sign with default domain, selector linked;;
8;testsuite.at:491;Verify simple author signature;;
9;testsuite.at:499;Verify author signature mixed with other 1/6;;
10;testsuite.at:506;Verify author signature mixed with other 2/6;;
11;testsuite.at:513;Verify author signature mixed with other 3/6;;
12;testsuite.at:520;Verify author signature mixed with other 4/6;;
13;testsuite.at:527;Verify author signature mixed with other 5/6;;
14;testsuite.at:534;Verify author signature mixed with other 6/6;;
15;testsuite.at:541;Verify simple author failed signature;;
16;testsuite.at:549;Verify sender signature mixed with other 1/6;;
17;testsuite.at:557;Verify sender signature mixed with other 2/6;;
18;testsuite.at:564;Verify sender signature mixed with other 3/6;;
19;testsuite.at:571;Verify sender signature mixed with other 4/6;;
20;testsuite.at:578;Verify sender signature mixed with other 5/6;;
21;testsuite.at:585;Verify sender signature mixed with other 6/6;;
22;testsuite.at:596;Verify the IP address passed to database;;
23;testsuite.at:608;Verify the bounce address passed to database;;
24;testsuite.at:620;Verify bounce address after signing;;
25;testsuite.at:653;Reject message with non-existent From: domain;;
26;testsuite.at:677;Accept message with non-existent From: domain;;
27;testsuite.at:704;Whitelisted sender, non-existent From: domain;;
28;testsuite.at:750;Whitelisted signer, non-existent From: domain;;
29;testsuite.at:785;Whitelisted both ways, SPF ignored;;
30;testsuite.at:838;Dkim whitelisting with SPF-validated signer;;
31;testsuite.at:873;Whitelisted but not authenticated From: domain;;
32;testsuite.at:906;Verify author signature with policy: all;;
33;testsuite.at:939;Verify author signature with policy: discard;;
34;testsuite.at:972;Fail author signature with policy: all;;
35;testsuite.at:1005;Reject author signature with policy: all;;
36;testsuite.at:1029;Drop author signature with policy: discard;;
37;testsuite.at:1056;Whitelisted sender, failed policy: discard;;
38;testsuite.at:1094;Verify sender, fail author, policy: all;;
39;testsuite.at:1127;Verify sender, fail author, policy: discard;;
40;testsuite.at:1159;Missing author signature with policy: all;;
41;testsuite.at:1193;Missing author signature with policy: discard;;
42;testsuite.at:1227;Mandatory author signature without SPF;;
43;testsuite.at:1260;Drop missing signature with 1 recipient;;
44;testsuite.at:1296;No signature, no policy, and no SPF;;
45;testsuite.at:1330;Save From: even with no authentication;;
46;testsuite.at:1367;Cannot write unauthenticated msg w/o From:;;
47;testsuite.at:1412;Logging specific header fields to the DB;;
48;testsuite.at:1524;Signing after the From field;;
49;testsuite.at:1534;Not signing for missing choice field;;
50;testsuite.at:1544;Not signing for missing key;;
51;testsuite.at:1555;Default domain even if login domain;;
52;testsuite.at:1565;Login domain preferred;;
53;testsuite.at:1575;Login domain not preferred;;
54;testsuite.at:1585;Custom field, second instance overrides;;
55;testsuite.at:1599;Custom field, second instance does not override;;
56;testsuite.at:1641;A-R layout with multiple signatures;;
57;testsuite.at:1653;Whitelisted domain reported;;
58;testsuite.at:1669;Vouched domain reported;;
59;testsuite.at:1684;Whitelisted + vouched domain;;
60;testsuite.at:1702;Report all sigs;;
61;testsuite.at:1719;Report all sigs with header.b;;
62;testsuite.at:1746;Reject too many signatures;;
63;testsuite.at:1770;Obfuscate userid;;
64;testsuite.at:1809;Retrieve obfuscated userid;;
65;testsuite.at:1820;Retrieve target domains;;
66;testsuite.at:1862;Check dkimsign finds the right executable;;
67;testsuite.at:1874;Sign and verify with no-fork;;
68;testsuite.at:1917;Non filtered file copied to stdout if no-fork;;
69;testsuite.at:1938;Dkimsign copies pipe to tmp;;
70;testsuite.at:1952;Dkimsign reads default domain;;
71;testsuite.at:1969;Dkimsign reads message recipients;;
72;testsuite.at:2005;Create blocked user list;;
73;testsuite.at:2023;Update blocked user list;;
74;testsuite.at:2046;Update blocked user list missing key;;
75;testsuite.at:2068;Update blocked user list missing key and domain;;
76;testsuite.at:2090;Reject blocked user;;
77;testsuite.at:2116;Reject blocked user missing domain;;
78;testsuite.at:2142;Reject blocked user sending also to postmaster;;
79;testsuite.at:2169;Accept blocked user sending to postmaster only;;
80;testsuite.at:2201;Check parsing Authentication-Results;;
81;testsuite.at:2249;DNSWL sender, non-existent From: domain;;
82;testsuite.at:2282;DNSWL sender domain logged to the database;;
83;testsuite.at:2307;Reload config after signing;;
84;testsuite.at:2340;Check parsing split_verify option;;
85;testsuite.at:2377;Check complaint_flag values;;
86;testsuite.at:2465;Verify action_header drop and 127.0.0.255;;
87;testsuite.at:2492;Not dropped if worthiness 1 (signed);;
88;testsuite.at:2521;Not dropped if worthiness 1 (not signed);;
89;testsuite.at:2547;Not dropped if whitelisted (author signature);;
90;testsuite.at:2579;Not dropped if whitelisted (SPF auth);;
91;testsuite.at:2606;Not dropped if whitelisted (SPF auth, signed);;
92;testsuite.at:2638;Not dropped if vouched;;
93;testsuite.at:2671;Not dropped if reputed author sig;;
94;testsuite.at:2705;Not dropped if reputed other sig;;
95;testsuite.at:2739;Verify action_header reject;;
96;testsuite.at:2767;Verify action_header drop and save message;;
97;testsuite.at:2849;DMARC non-none policy reported;;
98;testsuite.at:2863;DMARC failed quarantine reported;;
99;testsuite.at:2876;DMARC failed quarantine honored;;
100;testsuite.at:2889;DMARC failed reject reported;;
101;testsuite.at:2902;DMARC failed reject honored;;
102;testsuite.at:2910;DMARC failed reject honored from database;;
103;testsuite.at:2919;DMARC failed subdomain honored from database;;
104;testsuite.at:2928;DMARC reject not honored if whitelisted;;
105;testsuite.at:2945;DMARC reject not honored if dnswl'd;;
106;testsuite.at:2960;DMARC reject not honored if vouched;;
107;testsuite.at:2979;DMARC reject honored even if reputed;;
108;testsuite.at:2993;DMARC pass signed by subdomain;;
109;testsuite.at:3006;DMARC pass SPF HELO by subdomain;;
110;testsuite.at:3019;DMARC pass SPF MAILFROM by subdomain;;
111;testsuite.at:3032;DMARC pass SPF FROM (non standard) by subdomain;;
112;testsuite.at:3044;DMARC subdomain signed by domain;;
113;testsuite.at:3057;DMARC subdomain SPF HELO by domain;;
114;testsuite.at:3070;DMARC subdomain SPF MAILFROM by domain;;
115;testsuite.at:3083;DMARC sub SPF FROM (non standard) by domain;;
116;testsuite.at:3095;DMARC subdomain signed by subdomain;;
117;testsuite.at:3108;DMARC subdomain SPF by another subdomain;;
118;testsuite.at:3126;DMARC auth by subdomain strict dkim;;
119;testsuite.at:3140;DMARC auth by subdomain strict spf;;
120;testsuite.at:3154;DMARC auth by subdomain strict both;;
121;testsuite.at:3164;Check wrapping long lines on signing;;
"
# List of the all the test groups.
at_groups_all=`$as_echo "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 121; then
      $as_echo "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`$as_echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`$as_echo "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: \`$at_envvar'" ;;
	esac
	at_value=`$as_echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) $as_echo "$as_me: invalid option: $at_option" >&2
	$as_echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"; then :
  as_fn_error $? "\`$at_prev' requires an argument"
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`$as_echo "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 enable colored test results on terminal, or always
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <vesely@tana.it>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
zdkimfilter for courier 1.5 test suite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  $as_echo "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  $as_echo "$as_me (zdkimfilter for courier 1.5)" &&
  cat <<\_ATEOF || at_write_fail=1

Copyright (C) 2012 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory"
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file"
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`$as_echo "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.



# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
$as_echo "## --------------------------------------- ##
## zdkimfilter for courier 1.5 test suite. ##
## --------------------------------------- ##"
{
  $as_echo "## --------------------------------------- ##
## zdkimfilter for courier 1.5 test suite. ##
## --------------------------------------- ##"
  echo

  $as_echo "$as_me: command line was:"
  $as_echo "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    $as_echo "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    $as_echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    $as_echo "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  $as_echo "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  $as_echo "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do $as_echo "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$3: hard failure"; exit 99;;
    *) $as_echo "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    $as_echo "cd '$at_dir'" &&
    $as_echo "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  $as_echo "## ---------------- ##
## Tested programs. ##
## ---------------- ##"
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  case $at_program in
    [\\/]* | ?:[\\/]* ) $at_program_=$at_program ;;
    * )
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -f "$as_dir/$at_program" && break
  done
IFS=$as_save_IFS

    at_program_=$as_dir/$at_program ;;
  esac
  if test -f "$at_program_"; then
    {
      $as_echo "$at_srcdir/testsuite.at:266: $at_program_ --version"
      "$at_program_" --version </dev/null
      echo
    } >&5 2>&1
  else
    as_fn_error $? "cannot find $at_program" "$LINENO" 5
  fi
done

{
  $as_echo "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
$as_echo "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create \`$at_suite_dir'" "$LINENO" 5

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for `-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"; then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
$as_echo "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above `rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet $as_echo_n "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <vesely@tana.it>.
_ATEOF
    $as_echo "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose $as_echo_n "$at_group. $at_setup_line: "
  $as_echo_n "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    $as_echo "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    $as_echo " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      $as_echo "$at_log_msg" >> "$at_group_log"
      $as_echo "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      $as_echo "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 0 -gt 2 && at_signame=$at_signal
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
$as_echo "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test "${TMOUT+set}" = set && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`$as_echo "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
$as_echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    $as_echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
$as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  $as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    $as_echo "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      $as_echo "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="\`${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  $as_echo "Please send $at_msg and all information you think might help:

   To: <vesely@tana.it>
   Subject: [zdkimfilter for courier 1.5] $as_me: $at_fail_list${at_fail_list:+ failed${at_xpass_list:+, }}$at_xpass_list${at_xpass_list:+ passed unexpectedly}

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below \`${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 'testsuite.at:274' \
  "test default parameters" "                        "
at_xfail=no
(
  $as_echo "1. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

reputation_root host.dkim-reputation.example

_ZEOF

cat >batch <<'_ATEOF'
test1

exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:278: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:278"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "all_mode                 = N (Y/N)
trust_a_r                = N (Y/N)
verbose                  = 0 (int)
domain_keys              = . (key's directory)
header_canon_relaxed     = N (Y/N, N for simple)
body_canon_relaxed       = N (Y/N, N for simple)
sign_rsa_sha1            = N (Y/N, N for rsa-sha256)
key_choice_header        = NULL (key choice header)
default_domain           = NULL (dns)
selector                 = NULL (global)
sign_hfields             = NULL (space-separated, no colon)
skip_hfields             = NULL (space-separated, no colon)
no_signlen               = N (Y/N)
min_key_bits             = 0 (int)
redact_received_auth     = NULL (any text)
add_auth_pass            = N (Y/N)
tmp                      = . (temp directory)
tempfail_on_error        = N (Y/N)
split_verify             = NULL (exec name)
add_ztags                = N (Y/N, Y for debug z=)
blocked_user_list        = NULL (filename)
no_spf                   = N (Y/N)
save_from_anyway         = N (Y/N)
add_a_r_anyway           = N (Y/N)
report_all_sigs          = N (Y/N)
verify_one_domain        = N (Y/N)
max_signatures           = 128 (int)
log_dkim_order_above     = 0 (int)
publicsuffix             = NULL (filename)
honored_report_interval  = 86400 (seconds)
honor_dmarc              = N (Y/N)
honor_author_domain      = N (Y/N)
reject_on_nxdomain       = N (Y=procrustean ADSP)
action_header            = NULL (header field name)
header_action_is_reject  = N (Y/N)
save_drop                = NULL (quarantine directory)
do_reputation            = N (Y=do reputation lookup)
reputation_fail          = 32767 (high int)
reputation_pass          = -32768 (low int)
reputation_root          = host.dkim-reputation.example (lookup host)
trusted_vouchers         = NULL (space-separated, no colon)
dnswl_worthiness_pass    = 1 (int)
dnswl_invalid_ip         = $((DNSWL_ORG_INVALID_IP_ENDIAN + 0)) (int)
dnswl_octet_index        = 3 (int)
trusted_dnswl            =  (space-separated dns.zones)
                         0 list.dnswl.org
whitelisted_pass         = 3 (int)
dns_timeout              = 0 (secs)
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:278"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 'testsuite.at:285' \
  "test integer overflow is caught" "                "
at_xfail=no
(
  $as_echo "2. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

# 32 bit:     12345678
dns_timeout=0x100000000

_ZEOF

cat >batch <<'_ATEOF'
test1

exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:291: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:291"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "ERR:zdkimfilter[0]:Invalid value 0x100000000 for dns_timeout at line 6 in zftest.conf
ERR:zdkimfilter[0]:Unable to read config file
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 2 $at_status "$at_srcdir/testsuite.at:291"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 'testsuite.at:302' \
  "test backslash for parameter line continuation" " "
at_xfail=no
(
  $as_echo "3. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

reputation_root host.dkim-reputation.example
default_domain should be a domain name, but here we use it to test that\
a rather lengthy string can be put into that variable. In facts, it is\
just a string variable...
_ZEOF

cat >batch <<'_ATEOF'
test1

exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:308: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:308"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "all_mode                 = N (Y/N)
trust_a_r                = N (Y/N)
verbose                  = 0 (int)
domain_keys              = . (key's directory)
header_canon_relaxed     = N (Y/N, N for simple)
body_canon_relaxed       = N (Y/N, N for simple)
sign_rsa_sha1            = N (Y/N, N for rsa-sha256)
key_choice_header        = NULL (key choice header)
default_domain           = should be a domain name, but here we use it to test that a rather lengthy string can be put into that variable. In facts, it is just a string variable... (dns)
selector                 = NULL (global)
sign_hfields             = NULL (space-separated, no colon)
skip_hfields             = NULL (space-separated, no colon)
no_signlen               = N (Y/N)
min_key_bits             = 0 (int)
redact_received_auth     = NULL (any text)
add_auth_pass            = N (Y/N)
tmp                      = . (temp directory)
tempfail_on_error        = N (Y/N)
split_verify             = NULL (exec name)
add_ztags                = N (Y/N, Y for debug z=)
blocked_user_list        = NULL (filename)
no_spf                   = N (Y/N)
save_from_anyway         = N (Y/N)
add_a_r_anyway           = N (Y/N)
report_all_sigs          = N (Y/N)
verify_one_domain        = N (Y/N)
max_signatures           = 128 (int)
log_dkim_order_above     = 0 (int)
publicsuffix             = NULL (filename)
honored_report_interval  = 86400 (seconds)
honor_dmarc              = N (Y/N)
honor_author_domain      = N (Y/N)
reject_on_nxdomain       = N (Y=procrustean ADSP)
action_header            = NULL (header field name)
header_action_is_reject  = N (Y/N)
save_drop                = NULL (quarantine directory)
do_reputation            = N (Y=do reputation lookup)
reputation_fail          = 32767 (high int)
reputation_pass          = -32768 (low int)
reputation_root          = host.dkim-reputation.example (lookup host)
trusted_vouchers         = NULL (space-separated, no colon)
dnswl_worthiness_pass    = 1 (int)
dnswl_invalid_ip         = $((DNSWL_ORG_INVALID_IP_ENDIAN + 0)) (int)
dnswl_octet_index        = 3 (int)
trusted_dnswl            =  (space-separated dns.zones)
                         0 list.dnswl.org
whitelisted_pass         = 3 (int)
dns_timeout              = 0 (secs)
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:308"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 'testsuite.at:315' \
  "Sign and verify my signature" "                   "
at_xfail=no
(
  $as_echo "4. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

trust_a_r
add_auth_pass
sign_hfields Date From To Subject Authentication-Results

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctls <<'_ATEOF'
Msignmsg
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctls



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:330: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:330"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user@example.com with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

# make a modified copy of mail for later
{ set +x
$as_echo "$at_srcdir/testsuite.at:339: sed '/^Authentication-Results:/s/^/Old-/' mail > mail2"
at_fn_check_prepare_trace "testsuite.at:339"
( $at_check_trace; sed '/^Authentication-Results:/s/^/Old-/' mail > mail2
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:339"
$at_failed && at_fn_log_failure
$at_traceon; }

# verify mail normally
cat >ctlv <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >KEYFILE <<'_ATEOF'
s._domainkey.example.com v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctlv



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:354: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:354"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: Authentication-Results by example.com: please check ALLOW settings
INFO:zdkimfilter[0]:id=verifymsg: Authentication-Results by mail.example.com: empty
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@example.com, stat=0) rep=0
INFO:zdkimfilter[0]:id=verifymsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:354"
$at_failed && at_fn_log_failure
$at_traceon; }

# now repeat the test with modified mail
cat >batch <<'_ATEOF'
test2
test3
mail2
ctlv



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:371: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:371"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@example.com, stat=0) rep=0
INFO:zdkimfilter[0]:id=verifymsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:371"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 'testsuite.at:382' \
  "Sign with default domain" "                       "
at_xfail=no
(
  $as_echo "5. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:395: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:395"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:395"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 'testsuite.at:406' \
  "Sign with default domain, selector given" "       "
at_xfail=no
(
  $as_echo "6. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
selector given

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:420: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:420"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector given
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:420"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 'testsuite.at:431' \
  "Sign with default domain, selector linked" "      "
at_xfail=no
(
  $as_echo "7. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
selector given

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com


cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:445: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:445"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector linked
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:445"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 'testsuite.at:491' \
  "Verify simple author signature" "                 "
at_xfail=no
(
  $as_echo "8. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:494: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:494"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:494"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 'testsuite.at:499' \
  "Verify author signature mixed with other 1/6" "   "
at_xfail=no
(
  $as_echo "9. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:502: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:502"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:502"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 'testsuite.at:506' \
  "Verify author signature mixed with other 2/6" "   "
at_xfail=no
(
  $as_echo "10. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:509: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:509"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:509"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 'testsuite.at:513' \
  "Verify author signature mixed with other 3/6" "   "
at_xfail=no
(
  $as_echo "11. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:516: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:516"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:516"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 'testsuite.at:520' \
  "Verify author signature mixed with other 4/6" "   "
at_xfail=no
(
  $as_echo "12. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:523: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:523"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:523"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 'testsuite.at:527' \
  "Verify author signature mixed with other 5/6" "   "
at_xfail=no
(
  $as_echo "13. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:530: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:530"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 'testsuite.at:534' \
  "Verify author signature mixed with other 6/6" "   "
at_xfail=no
(
  $as_echo "14. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:537: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:537"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:537"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 'testsuite.at:541' \
  "Verify simple author failed signature" "          "
at_xfail=no
(
  $as_echo "15. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:544: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:544"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=fail (id=@author.example, signature verification failed, stat=1) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:544"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 'testsuite.at:549' \
  "Verify sender signature mixed with other 1/6" "   "
at_xfail=no
(
  $as_echo "16. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:552: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:552"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:552"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 'testsuite.at:557' \
  "Verify sender signature mixed with other 2/6" "   "
at_xfail=no
(
  $as_echo "17. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:560: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:560"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:560"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
#AT_START_18
at_fn_group_banner 18 'testsuite.at:564' \
  "Verify sender signature mixed with other 3/6" "   "
at_xfail=no
(
  $as_echo "18. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:567: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:567"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:567"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_18
#AT_START_19
at_fn_group_banner 19 'testsuite.at:571' \
  "Verify sender signature mixed with other 4/6" "   "
at_xfail=no
(
  $as_echo "19. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:574: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:574"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:574"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_19
#AT_START_20
at_fn_group_banner 20 'testsuite.at:578' \
  "Verify sender signature mixed with other 5/6" "   "
at_xfail=no
(
  $as_echo "20. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:581: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:581"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:581"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_20
#AT_START_21
at_fn_group_banner 21 'testsuite.at:585' \
  "Verify sender signature mixed with other 6/6" "   "
at_xfail=no
(
  $as_echo "21. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:588: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:588"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_21
#AT_START_22
at_fn_group_banner 22 'testsuite.at:596' \
  "Verify the IP address passed to database" "       "
at_xfail=no
(
  $as_echo "22. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:599: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:599"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:599"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:600: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:600"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:600"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:601: grep 'ip: c0000201' database_dump"
at_fn_check_prepare_trace "testsuite.at:601"
( $at_check_trace; grep 'ip: c0000201' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "ip: c0000201
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:601"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_22
#AT_START_23
at_fn_group_banner 23 'testsuite.at:608' \
  "Verify the bounce address passed to database" "   "
at_xfail=no
(
  $as_echo "23. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:611: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:611"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:611"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:612: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:612"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:612"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:613: grep 'envelope_sender:' database_dump"
at_fn_check_prepare_trace "testsuite.at:613"
( $at_check_trace; grep 'envelope_sender:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "envelope_sender: bounces@server.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:613"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_23
#AT_START_24
at_fn_group_banner 24 'testsuite.at:620' \
  "Verify bounce address after signing" "            "
at_xfail=no
(
  $as_echo "24. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
db_backend test
db_sql_insert_target_ref dummy

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
suser-bounce@example.com
Msignmsg
uauthsmtp
iuser
rrecipient@example.org
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:637: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:637"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:637"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:645: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:645"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:645"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:646: grep 'envelope_sender:' database_dump"
at_fn_check_prepare_trace "testsuite.at:646"
( $at_check_trace; grep 'envelope_sender:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "envelope_sender: user-bounce@example.com
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:646"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_24
#AT_START_25
at_fn_group_banner 25 'testsuite.at:653' \
  "Reject message with non-existent From: domain" "  "
at_xfail=no
(
  $as_echo "25. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mfraudmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:667: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:667"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=fraudmsg: invalid domain author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Invalid author domain
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:667"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_25
#AT_START_26
at_fn_group_banner 26 'testsuite.at:677' \
  "Accept message with non-existent From: domain" "  "
at_xfail=no
(
  $as_echo "26. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mfraudmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:688: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:688"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:688"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:694: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:694"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:694"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:695: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:695"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:695"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_26
#AT_START_27
at_fn_group_banner 27 'testsuite.at:704' \
  "Whitelisted sender, non-existent From: domain" "  "
at_xfail=no
(
  $as_echo "27. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
db_backend test
db_sql_whitelisted sender.example:2

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Musenetmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:718: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:718"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:718"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:719: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:719"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but sender.example is whitelisted (auth: SPF)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:719"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:726: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:726"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:726"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:727: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:727"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:727"
$at_failed && at_fn_log_failure
$at_traceon; }


# same with db_sql_domain_flags
cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
db_backend test
db_sql_domain_flags sender.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:739: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:739"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but sender.example is whitelisted (auth: SPF)
INFO:zdkimfilter[0]:id=usenetmsg: removing Authentication-Results from test.example
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:739"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_27
#AT_START_28
at_fn_group_banner 28 'testsuite.at:750' \
  "Whitelisted signer, non-existent From: domain" "  "
at_xfail=no
(
  $as_echo "28. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
db_backend test
db_sql_whitelisted sender.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:755: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:755"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:755"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Musenetmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:767: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:767"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but sender.example is whitelisted (auth: DKIM)
INFO:zdkimfilter[0]:id=usenetmsg: verified: dkim=pass (id=@sender.example, stat=0) adsp=nxdomain rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:767"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:775: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:775"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:775"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:776: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:776"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim=pass (whitelisted) header.i=@sender.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:776"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_28
#AT_START_29
at_fn_group_banner 29 'testsuite.at:785' \
  "Whitelisted both ways, SPF ignored" "             "
at_xfail=no
(
  $as_echo "29. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
verify_one_domain
db_backend test
db_sql_whitelisted other.example:2 sender.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:791: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:791"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:791"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Musenetmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:803: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:803"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but sender.example is whitelisted (auth: DKIM)
INFO:zdkimfilter[0]:id=usenetmsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) adsp=nxdomain rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:803"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:811: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:811"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:811"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:812: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:812"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass (whitelisted) header.i=@sender.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:812"
$at_failed && at_fn_log_failure
$at_traceon; }


# same with db_sql_domain_flags
cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
verify_one_domain
db_backend test
db_sql_domain_flags other.example:2 sender.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:826: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:826"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but sender.example is whitelisted (auth: DKIM)
INFO:zdkimfilter[0]:id=usenetmsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) adsp=nxdomain rep=0
INFO:zdkimfilter[0]:id=usenetmsg: removing Authentication-Results from test.example
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:826"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_29
#AT_START_30
at_fn_group_banner 30 'testsuite.at:838' \
  "Dkim whitelisting with SPF-validated signer" "    "
at_xfail=no
(
  $as_echo "30. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
db_backend test
db_sql_whitelisted other.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:843: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:843"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:843"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Musenetmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:855: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:855"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but other.example is whitelisted (auth: DKIM)
INFO:zdkimfilter[0]:id=usenetmsg: verified: spf=pass, dkim=pass (id=@other.example, stat=0) adsp=nxdomain rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:855"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:863: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:863"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:863"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:864: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:864"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass (whitelisted) header.i=@other.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:864"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_30
#AT_START_31
at_fn_group_banner 31 'testsuite.at:873' \
  "Whitelisted but not authenticated From: domain" " "
at_xfail=no
(
  $as_echo "31. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
save_from_anyway
db_backend test
db_sql_whitelisted author.example:2
db_sql_select_domain dummy

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mfraudmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:889: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:889"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=fraudmsg: invalid domain author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Invalid author domain
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:889"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:896: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:896"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:896"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:897: grep 'domain: author.example' database_dump"
at_fn_check_prepare_trace "testsuite.at:897"
( $at_check_trace; grep 'domain: author.example' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "domain: author.example
domain: author.example
domain: author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:897"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_31
#AT_START_32
at_fn_group_banner 32 'testsuite.at:906' \
  "Verify author signature with policy: all" "       "
at_xfail=no
(
  $as_echo "32. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=all
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:920: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:920"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) adsp:all=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:920"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:927: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:927"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:927"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:928: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:928"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim-adsp=pass header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:928"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_32
#AT_START_33
at_fn_group_banner 33 'testsuite.at:939' \
  "Verify author signature with policy: discard" "   "
at_xfail=no
(
  $as_echo "33. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:953: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:953"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) adsp:discardable=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:953"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:960: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:960"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:960"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:961: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:961"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim-adsp=pass header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:961"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_33
#AT_START_34
at_fn_group_banner 34 'testsuite.at:972' \
  "Fail author signature with policy: all" "         "
at_xfail=no
(
  $as_echo "34. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=all
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:986: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:986"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: verified: spf=pass, dkim=fail (id=@author.example, signature verification failed, stat=1) adsp:all=fail rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:986"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:993: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:993"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:993"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:994: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:994"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=fail (signature verification failed) header.i=@author.example;
  dkim-adsp=fail header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:994"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_34
#AT_START_35
at_fn_group_banner 35 'testsuite.at:1005' \
  "Reject author signature with policy: all" "       "
at_xfail=no
(
  $as_echo "35. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=all
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

honor_author_domain

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1020: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1020"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 DKIM signature required by ADSP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1020"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_35
#AT_START_36
at_fn_group_banner 36 'testsuite.at:1029' \
  "Drop author signature with policy: discard" "     "
at_xfail=no
(
  $as_echo "36. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

honor_author_domain

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
fTesT
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1045: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1045"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: adsp=discardable policy: author.example, no VBR and no whitelist
INFO:zdkimfilter[0]:drop msg,id=policymsg: adsp=discard
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "050 Message dropped.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1045"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_36
#AT_START_37
at_fn_group_banner 37 'testsuite.at:1056' \
  "Whitelisted sender, failed policy: discard" "     "
at_xfail=no
(
  $as_echo "37. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

honor_author_domain
db_backend test
db_sql_whitelisted sender.example:2

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1064: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1064"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1064"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1074: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1074"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: adsp=discardable policy: author.example, but sender.example is whitelisted (auth: SPF)
INFO:zdkimfilter[0]:id=policymsg: verified: spf=pass, dkim=fail (id=@author.example, signature verification failed, stat=1) adsp:discardable=discard rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1074"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1082: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1082"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1082"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1083: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:1083"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=fail (signature verification failed) header.i=@author.example;
  dkim-adsp=discard header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1083"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_37
#AT_START_38
at_fn_group_banner 38 'testsuite.at:1094' \
  "Verify sender, fail author, policy: all" "        "
at_xfail=no
(
  $as_echo "38. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=all
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1108: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1108"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=policymsg: verified: spf=pass, dkim=pass (id=@sender.example, stat=0) adsp:all=fail rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1108"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1115: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1115"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1115"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1116: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:1116"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@sender.example;
  dkim-adsp=fail header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1116"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_38
#AT_START_39
at_fn_group_banner 39 'testsuite.at:1127' \
  "Verify sender, fail author, policy: discard" "    "
at_xfail=no
(
  $as_echo "39. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267205960; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=bANxWNgMVyGL6Yo2esWSkR3tVTtMX4cTQe6JP01wkm3yCZDUo2kI3Q9NZ6fQ18hCU
	 D2/xuZw293Gx+oetp/j2jksGh+AMVEZ/wSMkYO5Sx4jg1FcbRej2E+BEj//TChzJa+
	 gWyV1/f26deNVeiTYOxgzsW8XUp97eWe5JnK+uYw=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1141: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1141"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1141"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1147: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1147"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1147"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1148: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:1148"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@sender.example;
  dkim-adsp=discard header.from=user@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1148"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_39
#AT_START_40
at_fn_group_banner 40 'testsuite.at:1159' \
  "Missing author signature with policy: all" "      "
at_xfail=no
(
  $as_echo "40. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=all
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


_ZEOF

cat >POLICYFILE <<'_ATEOF'
dkim=all
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1176: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1176"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1176"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1182: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1182"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1182"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1183: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:1183"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim-adsp=fail header.from=user@author.example
Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1183"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_40
#AT_START_41
at_fn_group_banner 41 'testsuite.at:1193' \
  "Missing author signature with policy: discard" "  "
at_xfail=no
(
  $as_echo "41. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


_ZEOF

cat >POLICYFILE <<'_ATEOF'
dkim=discardable
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1210: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1210"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1210"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1216: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1216"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1216"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1217: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:1217"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim-adsp=discard header.from=user@author.example
Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_41
#AT_START_42
at_fn_group_banner 42 'testsuite.at:1227' \
  "Mandatory author signature without SPF" "         "
at_xfail=no
(
  $as_echo "42. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=discardable
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


_ZEOF

cat >POLICYFILE <<'_ATEOF'
dkim=discardable
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1244: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1244"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1244"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1250: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:1250"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1250"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1251: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:1251"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim-adsp=discard header.from=user@author.example
Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1251"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_42
#AT_START_43
at_fn_group_banner 43 'testsuite.at:1260' \
  "Drop missing signature with 1 recipient" "        "
at_xfail=no
(
  $as_echo "43. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=discardable
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

honor_author_domain

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
fTesT
rfoo@example.org
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1278: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1278"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "050 Message dropped.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1278"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1284: head -n 5 ctl"
at_fn_check_prepare_trace "testsuite.at:1284"
( $at_check_trace; head -n 5 ctl
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Mpolicymsg
usmtp
fTesT
rfoo@example.org
I0 R 250 Dropped.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1284"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_43
#AT_START_44
at_fn_group_banner 44 'testsuite.at:1296' \
  "No signature, no policy, and no SPF" "            "
at_xfail=no
(
  $as_echo "44. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=unknown
author.example X
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

: >database_dump
cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1316: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1316"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1316"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1322: head -n 1 mail"
at_fn_check_prepare_trace "testsuite.at:1322"
( $at_check_trace; head -n 1 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1322"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1326: cat database_dump"
at_fn_check_prepare_trace "testsuite.at:1326"
( $at_check_trace; cat database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1326"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_44
#AT_START_45
at_fn_group_banner 45 'testsuite.at:1330' \
  "Save From: even with no authentication" "         "
at_xfail=no
(
  $as_echo "45. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_adsp._domainkey.author.example dkim=unknown
author.example X
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
save_from_anyway

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mpolicymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1350: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1350"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1350"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1356: head -n 1 mail"
at_fn_check_prepare_trace "testsuite.at:1356"
( $at_check_trace; head -n 1 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1356"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1360: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1360"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1360"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1361: grep 'domain: ' database_dump"
at_fn_check_prepare_trace "testsuite.at:1361"
( $at_check_trace; grep 'domain: ' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "domain: author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_45
#AT_START_46
at_fn_group_banner 46 'testsuite.at:1367' \
  "Cannot write unauthenticated msg w/o From:" "     "
at_xfail=no
(
  $as_echo "46. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
save_from_anyway

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received-SPF: none SPF=HELO sender=server.sender.example;
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Message without From:
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Cannot write this message on the DB, because it wouldn't be
attached to any domain.  Perhaps we could attach it to the
IP address, looking it up in some number-whois server...
_ATEOF

cat >ctl <<'_ATEOF'
Manonymousmsg
usmtp
_ATEOF

: >database_dump
cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1398: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1398"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1398"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1404: head -n 1 mail"
at_fn_check_prepare_trace "testsuite.at:1404"
( $at_check_trace; head -n 1 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Received: from server.example by test.example with ESMTP
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1404"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1408: cat database_dump"
at_fn_check_prepare_trace "testsuite.at:1408"
( $at_check_trace; cat database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1408"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_46
#AT_START_47
at_fn_group_banner 47 'testsuite.at:1412' \
  "Logging specific header fields to the DB" "       "
at_xfail=no
(
  $as_echo "47. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:1413: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1413"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1413"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: none SPF=HELO sender=server.sender.example;
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
From:     The (sender)
	<author@author.example>
To: (undisclosed recipients)
Subject: This continues to the next line;
		 		after the                    semicolon
Content-Type: text/plain; charset=us-ascii

hi there!
_ATEOF

cat >ctl <<'_ATEOF'
sauthor-bounce@author.example
Mloggedmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1443: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1443"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1443"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1449: grep 'content_type:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1449"
( $at_check_trace; grep 'content_type:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "content_type: text/plain
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1449"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1452: grep 'content_encoding:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1452"
( $at_check_trace; grep 'content_encoding:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "content_encoding: -- not given --
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1452"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1455: grep 'date:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1455"
( $at_check_trace; grep 'date:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "date: Mon, 08 Feb 2010 13:12:55 +0100
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1455"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1458: grep 'message_id:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1458"
( $at_check_trace; grep 'message_id:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "message_id: <123456@author.example>
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1458"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1461: grep 'from:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1461"
( $at_check_trace; grep 'from:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "from: The (sender) <author@author.example>
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1461"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1464: grep 'subject:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1464"
( $at_check_trace; grep 'subject:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "subject: This continues to the next line; after the semicolon
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1464"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1467: grep 'envelope_sender:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1467"
( $at_check_trace; grep 'envelope_sender:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "envelope_sender: author-bounce@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1467"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_47
#AT_START_48
at_fn_group_banner 48 'testsuite.at:1524' \
  "Signing after the From field" "                   "
at_xfail=no
(
  $as_echo "48. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
key_choice_header from

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1530: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1530"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.org, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_48
#AT_START_49
at_fn_group_banner 49 'testsuite.at:1534' \
  "Not signing for missing choice field" "           "
at_xfail=no
(
  $as_echo "49. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
key_choice_header no-such-header-field

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1540: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1540"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: not signing for user@example.com: no domain
INFO:zdkimfilter[0]:id=dyndom: response: 250 not filtered.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1540"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_49
#AT_START_50
at_fn_group_banner 50 'testsuite.at:1544' \
  "Not signing for missing key" "                    "
at_xfail=no
(
  $as_echo "50. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
selector given
key_choice_header from

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1551: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1551"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: not signing for user@example.com: no key
INFO:zdkimfilter[0]:id=dyndom: response: 250 not filtered.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1551"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_50
#AT_START_51
at_fn_group_banner 51 'testsuite.at:1555' \
  "Default domain even if login domain" "            "
at_xfail=no
(
  $as_echo "51. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.org
key_choice_header - *

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1561: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1561"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.org, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1561"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_51
#AT_START_52
at_fn_group_banner 52 'testsuite.at:1565' \
  "Login domain preferred" "                         "
at_xfail=no
(
  $as_echo "52. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.org
key_choice_header * -

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1571: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1571"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.com, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1571"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_52
#AT_START_53
at_fn_group_banner 53 'testsuite.at:1575' \
  "Login domain not preferred" "                     "
at_xfail=no
(
  $as_echo "53. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.org
key_choice_header from *

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@example.org>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1581: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1581"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.org, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1581"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_53
#AT_START_54
at_fn_group_banner 54 'testsuite.at:1585' \
  "Custom field, second instance overrides" "        "
at_xfail=no
(
  $as_echo "54. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
key_choice_header from x-repeated x-repeated *

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
X-Repeated: me@yet.another.example (format like mailbox)
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@another.example>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
X-Repeated: (this works) <x@example.org>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1595: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1595"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.org, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1595"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_54
#AT_START_55
at_fn_group_banner 55 'testsuite.at:1599' \
  "Custom field, second instance does not override" ""
at_xfail=no
(
  $as_echo "55. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
key_choice_header from x-repeated * x-repeated

_ZEOF

cat >linked <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF

$LN_S linked example.com
$LN_S linked example.org


cat >mail <<'_ATEOF'
X-Repeated: me@yet.another.example (format like mailbox)
Message-ID: <123456@author.example>
Received: from test.example
 by another.example
Date: Sun, 05 Sep 2010 15:42:58 +0200
From: Author <user@another.example>
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
X-Repeated: (this worked before) <x@example.org>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by the domain determined from the header:
the relevant field names have to be configured.

The header of the message has to be read an additional time in order
to check what field, if any, leads to the signing domain.
_ATEOF

cat >ctl <<'_ATEOF'
Mdyndom
uauthsmtp
iuser@example.com
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1609: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1609"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=dyndom: signing for user@example.com with domain example.com, selector linked
INFO:zdkimfilter[0]:id=dyndom: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1609"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_55
#AT_START_56
at_fn_group_banner 56 'testsuite.at:1641' \
  "A-R layout with multiple signatures" "            "
at_xfail=no
(
  $as_echo "56. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1642: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1642"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1642"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1643: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:1643"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1643"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_56
#AT_START_57
at_fn_group_banner 57 'testsuite.at:1653' \
  "Whitelisted domain reported" "                    "
at_xfail=no
(
  $as_echo "57. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
# already defined: db_backend test
db_sql_whitelisted sender.example:2

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1654: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1654"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1654"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1657: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1657"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1657"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1658: head -n 5 mail"
at_fn_check_prepare_trace "testsuite.at:1658"
( $at_check_trace; head -n 5 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim=pass (whitelisted) header.i=@sender.example
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_57
#AT_START_58
at_fn_group_banner 58 'testsuite.at:1669' \
  "Vouched domain reported" "                        "
at_xfail=no
(
  $as_echo "58. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
trusted_vouchers sender-cert.example

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1670: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1670"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1670"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1672: head -n 6 mail"
at_fn_check_prepare_trace "testsuite.at:1672"
( $at_check_trace; head -n 6 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim=pass (vbr) header.i=@sender.example;
  vbr=pass header.mv=sender-cert.example header.md=sender.example (all)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1672"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_58
#AT_START_59
at_fn_group_banner 59 'testsuite.at:1684' \
  "Whitelisted + vouched domain" "                   "
at_xfail=no
(
  $as_echo "59. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
trusted_vouchers sender-cert.example
# already defined: db_backend test
db_sql_whitelisted sender.example:2

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1685: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1685"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1685"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1689: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1689"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1689"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1690: head -n 6 mail"
at_fn_check_prepare_trace "testsuite.at:1690"
( $at_check_trace; head -n 6 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim=pass (whitelisted, vbr) header.i=@sender.example;
  vbr=pass header.mv=sender-cert.example header.md=sender.example (all)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1690"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_59
#AT_START_60
at_fn_group_banner 60 'testsuite.at:1702' \
  "Report all sigs" "                                "
at_xfail=no
(
  $as_echo "60. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
trusted_vouchers sender-cert.example
report_all_sigs

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1703: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1703"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1703"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1706: head -n 7 mail"
at_fn_check_prepare_trace "testsuite.at:1706"
( $at_check_trace; head -n 7 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim=pass (vbr) header.i=@sender.example;
  dkim=pass header.i=@other.example;
  vbr=pass header.mv=sender-cert.example header.md=sender.example (all)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1706"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_60
#AT_START_61
at_fn_group_banner 61 'testsuite.at:1719' \
  "Report all sigs with header.b" "                  "
at_xfail=no
(
  $as_echo "61. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

db_backend test
db_sql_insert_msg_ref dummy
trusted_vouchers sender-cert.example
report_all_sigs

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1350490237; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=mDCtHhur76zwYTOuYoKaBF7WUbx6STaV2hiDSrF1rnGsIwShaopm1gHymPcr9ykHG
	 ilz/gCrdtNlr7SbKfI3z2j7ipXjwMwCrEV8ZkV83r1H5gELVmw+0k1QwUeOkZIPB3Z
	 I1yQbxcXWma6Wq45J0bEscYqHrS2FMHWcb0BXhCs=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
sender.example._vouch.sender-cert.example all
_ATEOF

cat >batch <<'_ATEOF'
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1720: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1720"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1720"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1723: head -n 10 mail"
at_fn_check_prepare_trace "testsuite.at:1723"
( $at_check_trace; head -n 10 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dkim=pass (vbr) header.i=@sender.example
    header.b=d6AyU6LW;
  dkim=pass (vbr) header.i=@sender.example
    header.b=mDCtHhur;
  dkim=pass header.i=@other.example;
  vbr=pass header.mv=sender-cert.example header.md=sender.example (all)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1723"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1736: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1736"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1736"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1737: grep 'vbr_mv: ' database_dump"
at_fn_check_prepare_trace "testsuite.at:1737"
( $at_check_trace; grep 'vbr_mv: ' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "vbr_mv: -- not given --
vbr_mv: sender-cert.example
vbr_mv: -- not given --
vbr_mv: -- not given --
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1737"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_61
#AT_START_62
at_fn_group_banner 62 'testsuite.at:1746' \
  "Reject too many signatures" "                     "
at_xfail=no
(
  $as_echo "62. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 2
domain_keys = .
tmp = .

max_signatures 2

_ZEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl

exit


exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1761: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1761"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Too many DKIM signatures
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1761"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_62
#AT_START_63
at_fn_group_banner 63 'testsuite.at:1770' \
  "Obfuscate userid" "                               "
at_xfail=no
(
  $as_echo "63. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

default_domain example.com
redact_received_auth using this secret text

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from test.example
 (whatever is going to be written here AUTH: method user, and some more)
 by submission.server.example with ESMTPA
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1787: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1787"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1787"
$at_failed && at_fn_log_failure
$at_traceon; }

obfuscated=`test "$HAVE_NETTLE" = "1" && echo "Xr@LC"`

{ set +x
$as_echo "$at_srcdir/testsuite.at:1795: sed -n '/^Received: from test/,+2p' mail"
at_fn_check_prepare_trace "testsuite.at:1795"
( $at_check_trace; sed -n '/^Received: from test/,+2p' mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Received: from test.example
 (whatever is going to be written here AUTH: method $obfuscated, and some more)
 by submission.server.example with ESMTPA
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1795"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_63
#AT_START_64
at_fn_group_banner 64 'testsuite.at:1809' \
  "Retrieve obfuscated userid" "                     "
at_xfail=no
(
  $as_echo "64. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

default_domain example.com
redact_received_auth using this secret text

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1813: test \"\$HAVE_NETTLE\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_NETTLE\" = \"1\" || exit 77" "testsuite.at:1813"
( $at_check_trace; test "$HAVE_NETTLE" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1813"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1814: redact -f zftest.conf --decode Xr@LC"
at_fn_check_prepare_trace "testsuite.at:1814"
( $at_check_trace; redact -f zftest.conf --decode Xr@LC
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "user
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1814"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_64
#AT_START_65
at_fn_group_banner 65 'testsuite.at:1820' \
  "Retrieve target domains" "                        "
at_xfail=no
(
  $as_echo "65. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com
db_backend test
db_sql_select_target dummy

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
rsomeone@example.org
rmyself@example.com
rsomeone-else@example.org
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1838: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1838"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1838"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1846: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1846"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1846"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1847: grep 'example.org' database_dump"
at_fn_check_prepare_trace "testsuite.at:1847"
( $at_check_trace; grep 'example.org' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "domain: example.org
domain: example.org
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1847"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1852: grep 'rcpt_count' database_dump"
at_fn_check_prepare_trace "testsuite.at:1852"
( $at_check_trace; grep 'rcpt_count' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "rcpt_count: 3
rcpt_count: 3
rcpt_count: 3
rcpt_count: 3
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1852"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_65
#AT_START_66
at_fn_group_banner 66 'testsuite.at:1862' \
  "Check dkimsign finds the right executable" "      "
at_xfail=no
(
  $as_echo "66. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

default_domain example.com
redact_received_auth using this secret text

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1866: dkimsign -f zftest.conf --version"
at_fn_check_prepare_trace "testsuite.at:1866"
( $at_check_trace; dkimsign -f zftest.conf --version
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1866"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_66
#AT_START_67
at_fn_group_banner 67 'testsuite.at:1874' \
  "Sign and verify with no-fork" "                   "
at_xfail=no
(
  $as_echo "67. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .


_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctls <<'_ATEOF'
Mdkimsign
uauthsmtp
ipostmaster@example.com
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1882: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig "
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig " "testsuite.at:1882"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "zdkimfilter: running for dkimsign on 1 ctl + 1 mail files
INFO:zdkimfilter[0]:id=dkimsign: signing for postmaster@example.com with domain example.com, selector s
INFO:zdkimfilter[0]:id=dkimsign: response: 250 Ok.

FILTER-RESPONSE:250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1882"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >ctlv <<'_ATEOF'
Mverifymsg
usmtp
_ATEOF

cat >KEYFILE <<'_ATEOF'
s._domainkey.example.com v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mailsig
ctlv



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1905: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:1905"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@example.com, stat=0) rep=0
INFO:zdkimfilter[0]:id=verifymsg: found Authentication-Results by mail.example.com
INFO:zdkimfilter[0]:id=verifymsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1905"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_67
#AT_START_68
at_fn_group_banner 68 'testsuite.at:1917' \
  "Non filtered file copied to stdout if no-fork" "  "
at_xfail=no
(
  $as_echo "68. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctls <<'_ATEOF'
Mdkimsign
uauthsmtp
ipostmaster@example.com
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1924: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig "
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig " "testsuite.at:1924"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --no-db --no-fork -t1,dkimsign ctls  --batch-test <mail >mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "zdkimfilter: running for dkimsign on 1 ctl + 1 mail files
INFO:zdkimfilter[0]:id=dkimsign: not signing for postmaster@example.com: no key
INFO:zdkimfilter[0]:id=dkimsign: response: 250 not filtered.

FILTER-RESPONSE:250 not filtered.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1924"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1934: cmp mail mailsig"
at_fn_check_prepare_trace "testsuite.at:1934"
( $at_check_trace; cmp mail mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1934"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_68
#AT_START_69
at_fn_group_banner 69 'testsuite.at:1938' \
  "Dkimsign copies pipe to tmp" "                    "
at_xfail=no
(
  $as_echo "69. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .


_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1941: cat mail | \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --domain example.com -- --batch-test >mailsig "
at_fn_check_prepare_notrace 'a shell pipeline' "testsuite.at:1941"
( $at_check_trace; cat mail | $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --domain example.com -- --batch-test >mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO: zfilter: zdkimfilter: running for dkimsign on 1 ctl + 1 mail files
INFO: zfilter: zdkimfilter[0]:id=dkimsign: not signing for postmaster@example.com: no key
INFO: zfilter: zdkimfilter[0]:id=dkimsign: response: 250 not filtered.
INFO: zfilter: 250 not filtered.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1941"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1948: cmp mail mailsig"
at_fn_check_prepare_trace "testsuite.at:1948"
( $at_check_trace; cmp mail mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1948"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_69
#AT_START_70
at_fn_group_banner 70 'testsuite.at:1952' \
  "Dkimsign reads default domain" "                  "
at_xfail=no
(
  $as_echo "70. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .


#this is the default domain
default_domain = example.com

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1958: \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --domain example.com -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --domain example.com -- --batch-test >mailsig  <mail" "testsuite.at:1958"
( $at_check_trace; $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --domain example.com -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO: zfilter: zdkimfilter: running for dkimsign on 1 ctl + 1 mail files
INFO: zfilter: zdkimfilter[0]:id=dkimsign: not signing for postmaster@example.com: no key
INFO: zfilter: zdkimfilter[0]:id=dkimsign: response: 250 not filtered.
INFO: zfilter: 250 not filtered.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1958"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1965: cmp mail mailsig"
at_fn_check_prepare_trace "testsuite.at:1965"
( $at_check_trace; cmp mail mailsig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1965"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_70
#AT_START_71
at_fn_group_banner 71 'testsuite.at:1969' \
  "Dkimsign reads message recipients" "              "
at_xfail=no
(
  $as_echo "71. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:1970: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:1970"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1970"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 1
domain_keys = .
tmp = .


#this is the default domain
default_domain = example.com
db_backend test
db_sql_select_target dummy

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Cc: name@some.example
Bcc: "User" <user2@example.org>, user3@example(user's domain).net
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:1982: REMOTE_ADDR=192.0.2.2 \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -t. --domain user@example.com -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "REMOTE_ADDR=192.0.2.2 $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -t. --domain user@example.com -- --batch-test >mailsig  <mail" "testsuite.at:1982"
( $at_check_trace; REMOTE_ADDR=192.0.2.2 $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -t. --domain user@example.com -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1982"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1984: grep 'ip: c0000202' database_dump"
at_fn_check_prepare_trace "testsuite.at:1984"
( $at_check_trace; grep 'ip: c0000202' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "ip: c0000202
ip: c0000202
ip: c0000202
ip: c0000202
ip: c0000202
ip: c0000202
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1984"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:1993: grep 'domain:' database_dump"
at_fn_check_prepare_trace "testsuite.at:1993"
( $at_check_trace; grep 'domain:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "domain: some.example
domain: some.example
domain: example.org
domain: example.org
domain: example.net
domain: example.net
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:1993"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_71
#AT_START_72
at_fn_group_banner 72 'testsuite.at:2005' \
  "Create blocked user list" "                       "
at_xfail=no
(
  $as_echo "72. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2006: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2006"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2006"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


blocked_user_list = bul.txt
db_backend test
db_sql_check_user user: is-naughty

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Cc: name@some.example
Bcc: "User" <user2@example.org>, user3@example(user's domain).net
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2017: \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail" "testsuite.at:2017"
( $at_check_trace; $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2017"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2019: grep 'user@example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2019"
( $at_check_trace; grep 'user@example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2019"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_72
#AT_START_73
at_fn_group_banner 73 'testsuite.at:2023' \
  "Update blocked user list" "                       "
at_xfail=no
(
  $as_echo "73. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2024: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2024"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2024"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


blocked_user_list = bul.txt
db_backend test
db_sql_check_user user: is-naughty

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >bul.txt <<'_ATEOF'
someonelse@another.example is also naughty
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Cc: name@some.example
Bcc: "User" <user2@example.org>, user3@example(user's domain).net
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2037: \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail" "testsuite.at:2037"
( $at_check_trace; $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2037"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2039: grep 'user@example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2039"
( $at_check_trace; grep 'user@example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2039"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2040: grep 'someonelse@another.example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2040"
( $at_check_trace; grep 'someonelse@another.example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "someonelse@another.example is also naughty
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2040"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_73
#AT_START_74
at_fn_group_banner 74 'testsuite.at:2046' \
  "Update blocked user list missing key" "           "
at_xfail=no
(
  $as_echo "74. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2047: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2047"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2047"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


blocked_user_list = bul.txt
db_backend test
db_sql_check_user user: is-naughty

_ZEOF

cat >bul.txt <<'_ATEOF'
someonelse@another.example is also naughty
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Cc: name@some.example
Bcc: "User" <user2@example.org>, user3@example(user's domain).net
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2059: \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail" "testsuite.at:2059"
( $at_check_trace; $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter --domain user@example.com -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2059"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2061: grep 'user@example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2061"
( $at_check_trace; grep 'user@example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2061"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2062: grep 'someonelse@another.example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2062"
( $at_check_trace; grep 'someonelse@another.example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "someonelse@another.example is also naughty
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2062"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_74
#AT_START_75
at_fn_group_banner 75 'testsuite.at:2068' \
  "Update blocked user list missing key and domain" ""
at_xfail=no
(
  $as_echo "75. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2069: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2069"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2069"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .


blocked_user_list = bul.txt
db_backend test
db_sql_check_user user: not referenced: postmaster: naughty

_ZEOF

cat >bul.txt <<'_ATEOF'
someonelse@another.example is also naughty
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Cc: name@some.example
Bcc: "User" <user2@example.org>, user3@example(user's domain).net
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2081: \$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -- --batch-test >mailsig  <mail"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -- --batch-test >mailsig  <mail" "testsuite.at:2081"
( $at_check_trace; $VALGRIND_AND_OPTS dkimsign -f zftest.conf --filter --db-filter -- --batch-test >mailsig  <mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2081"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2083: grep 'postmaster' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2083"
( $at_check_trace; grep 'postmaster' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2083"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2084: grep 'someonelse@another.example' bul.txt"
at_fn_check_prepare_trace "testsuite.at:2084"
( $at_check_trace; grep 'someonelse@another.example' bul.txt
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "someonelse@another.example is also naughty
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2084"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_75
#AT_START_76
at_fn_group_banner 76 'testsuite.at:2090' \
  "Reject blocked user" "                            "
at_xfail=no
(
  $as_echo "76. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 1
domain_keys = .
tmp = .


blocked_user_list bul.txt

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Moutgoingmsg
uauthsmtp
iuser@example.com
rsomeone@somewhere.example
_ATEOF

cat >bul.txt <<'_ATEOF'
user@example.com is naughty
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2107: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2107"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 BLOCKED: can send to <postmaster@example.com> only.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2107"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_76
#AT_START_77
at_fn_group_banner 77 'testsuite.at:2116' \
  "Reject blocked user missing domain" "             "
at_xfail=no
(
  $as_echo "77. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 1
domain_keys = .
tmp = .


blocked_user_list bul.txt

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Moutgoingmsg
uauthsmtp
iuser
rsomeone@somewhere.example
_ATEOF

cat >bul.txt <<'_ATEOF'
user is naughty
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2133: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2133"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 BLOCKED: can send to <postmaster@--domain misconfigured--> only.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2133"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_77
#AT_START_78
at_fn_group_banner 78 'testsuite.at:2142' \
  "Reject blocked user sending also to postmaster" " "
at_xfail=no
(
  $as_echo "78. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 1
domain_keys = .
tmp = .


blocked_user_list bul.txt

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Moutgoingmsg
uauthsmtp
iuser@example.com
rpostmaster@example.com
rsomeone@somewhere.example
_ATEOF

cat >bul.txt <<'_ATEOF'
user@example.com is naughty
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2160: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2160"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 BLOCKED: can send to <postmaster@example.com> only.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2160"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_78
#AT_START_79
at_fn_group_banner 79 'testsuite.at:2169' \
  "Accept blocked user sending to postmaster only" " "
at_xfail=no
(
  $as_echo "79. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 1
domain_keys = .
tmp = .


blocked_user_list bul.txt

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Moutgoingmsg
uauthsmtp
iuser@example.com
rpostmaster@example.com
_ATEOF

cat >bul.txt <<'_ATEOF'
user@example.com is naughty
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2186: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2186"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_79
#AT_START_80
at_fn_group_banner 80 'testsuite.at:2201' \
  "Check parsing Authentication-Results" "           "
at_xfail=no
(
  $as_echo "80. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >a_r <<'_ATEOF'
example.com; none
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2204: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2204"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2204"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com;
 dnswl/3=pass dns.zone=list.dnswl.org policy.ip=127.0.6.2 policy.txt="test.tana.it http://www.tana.it/";
 spf=pass smtp.mailfrom=bounce.example.org;
 dkim=pass header.i=@example.org
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2212: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2212"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
 dnswl/3=pass dns.zone=list.dnswl.org policy.ip=127.0.6.2 policy.txt=test.tana.it http://www.tana.it/
 spf=pass smtp.mailfrom=bounce.example.org
 dkim=pass header.i=@example.org
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2212"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com;
 dnswl (comment is allowed here) / (here) 3 = pass   dns.zone = list.dnswl.org
 	policy.ip=127.0.6.2 policy.txt="test.tana.it http://www.tana.it/";
 spf (and here) = pass smtp.mailfrom=bounce.example.org;
 dkim(evenwithoutspaces)=pass header.i=@example.org
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2219: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2219"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
 dnswl/3=pass dns.zone=list.dnswl.org policy.ip=127.0.6.2 policy.txt=test.tana.it http://www.tana.it/
 spf=pass smtp.mailfrom=bounce.example.org
 dkim=pass header.i=@example.org
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2219"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com;dnswl/3=pass dns.zone=list.dnswl.org policy.ip=127.0.6.2 policy.txt=test.tana.it\ http://www.tana.it/;spf=pass smtp.mailfrom=bounce.example.org;dkim=pass header.i=@example.org
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2222: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2222"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
 dnswl/3=pass dns.zone=list.dnswl.org policy.ip=127.0.6.2 policy.txt=test.tana.it http://www.tana.it/
 spf=pass smtp.mailfrom=bounce.example.org
 dkim=pass header.i=@example.org
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2222"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com;p1=v p2=v p3=v p4=v p5=v p6=v p7=v p8=v p9=v p10=v
p11=v p12=v p13=v p14=v p15=v p16=v
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2226: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2226"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
 p1=v p2=v p3=v p4=v p5=v p6=v p7=v p8=v p9=v p10=v p11=v p12=v p13=v p14=v p15=v p16=v
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2226"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com;p1=v p2=v p3=v p4=v p5=v p6=v p7=v p8=v p9=v p10=v
p11=v p12=v p13=v p14=v p15=v p16=v p17=v
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2232: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2232"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com;
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/testsuite.at:2232"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >a_r <<'_ATEOF'
example.com/8b / 12345678901234567890;
 spf=pass reason = "various tests that \"may\" occur" smtp.mailfrom=bounce.example.org;
 dkim=pass header.i=@example.org;
 dkim=pass header.i = thebox (whatch for this) @ example.org;
 dkim=pass header.i = "the ugly box" (whatch for this) @ example.org
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2240: \$VALGRIND_AND_OPTS TESTutil a_r"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS TESTutil a_r" "testsuite.at:2240"
( $at_check_trace; $VALGRIND_AND_OPTS TESTutil a_r
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "example.com/8b/12345678901234567890;
 spf=pass reason=various tests that \"may\" occur smtp.mailfrom=bounce.example.org
 dkim=pass header.i=@example.org
 dkim=pass header.i=thebox@example.org
 dkim=pass header.i=the ugly box@example.org
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_80
#AT_START_81
at_fn_group_banner 81 'testsuite.at:2249' \
  "DNSWL sender, non-existent From: domain" "        "
at_xfail=no
(
  $as_echo "81. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

reject_on_nxdomain
trust_a_r

_ZEOF

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: test.example;
 dnswl=pass dns.zone=list.dnswl.org policy.ip=127.0.10.0
 policy.txt="sender.example http://www.dnswl.example/"
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=sender.example; s=x2;
	t=1267197537; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=d6AyU6LW/aOb2S0KQjewLe1AApiloi/CZSn9c1WOjZLJmz7govCghGjgI3ebMl5mC
	 cVzheZ+sjWJRFTj+L2Sd30j9L+gOc2ZmJ6wyK/UqhNGPIvZfhn4Sap4J51sk5JhvLr
	 zd6a1TVrz5nYJU3fF6QW7lLPtAcg2v05+UE38Ios=
Received: from mail.example.com by server.example with ESMTPA
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Musenetmsg
usmtp
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2264: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2264"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=usenetmsg: invalid domain author.example, but I found 1 DNSWL record(s) --sender.example
INFO:zdkimfilter[0]:id=usenetmsg: verified: dkim=pass (id=@sender.example, stat=0) adsp=nxdomain rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2264"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2272: test \"\$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77"
at_fn_check_prepare_dynamic "test \"$HAVE_LIBOPENDKIM_220\" = \"1\" || exit 77" "testsuite.at:2272"
( $at_check_trace; test "$HAVE_LIBOPENDKIM_220" = "1" || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2272"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2273: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2273"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim=pass header.i=@sender.example;
  dkim-adsp=nxdomain header.from=user@author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2273"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_81
#AT_START_82
at_fn_group_banner 82 'testsuite.at:2282' \
  "DNSWL sender domain logged to the database" "     "
at_xfail=no
(
  $as_echo "82. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

trust_a_r
db_backend test
db_sql_insert_msg_ref dummy

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: test.example;
 dnswl=pass dns.zone=list.dnswl.org policy.ip=127.0.10.0
 policy.txt="sender.example http://www.dnswl.example/"
Received-SPF: none SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Mdnswlmsg
usmtp
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2297: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2297"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2297"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2298: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2298"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 not filtered.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2298"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2300: grep 'domain: ' database_dump"
at_fn_check_prepare_trace "testsuite.at:2300"
( $at_check_trace; grep 'domain: ' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "domain: sender.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2300"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2302: grep 'auth_type: ' database_dump"
at_fn_check_prepare_trace "testsuite.at:2302"
( $at_check_trace; grep 'auth_type: ' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "auth_type: spf,dnswl
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2302"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_82
#AT_START_83
at_fn_group_banner 83 'testsuite.at:2307' \
  "Reload config after signing" "                    "
at_xfail=no
(
  $as_echo "83. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl

sleep 1
sighup
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2325: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2325"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2325"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_83
#AT_START_84
at_fn_group_banner 84 'testsuite.at:2340' \
  "Check parsing split_verify option" "              "
at_xfail=no
(
  $as_echo "84. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

split_verify zdkimfilter

_ZEOF

cat >batch <<'_ATEOF'
sighup


exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2345: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2345"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:zdkimfilter configured to verify only
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2345"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

split_verify dkimfilter

_ZEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2354: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2354"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:zdkimfilter configured to sign only
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2354"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_84
#AT_START_85
at_fn_group_banner 85 'testsuite.at:2377' \
  "Check complaint_flag values" "                    "
at_xfail=no
(
  $as_echo "85. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2378: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2378"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2378"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 0
domain_keys = .
tmp = .

db_backend test
db_sql_select_user dummy

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
suser-bounce@author.example
Msignmsg
uauthsmtp
iuser@example.com
rrecipient@another.example
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2390: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2390"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2390"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
$as_echo "$at_srcdir/testsuite.at:2391: grep 'complaint_flag:' database_dump"
at_fn_check_prepare_trace "testsuite.at:2391"
( $at_check_trace; grep 'complaint_flag:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "complaint_flag: 0
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2391"
$at_failed && at_fn_log_failure
$at_traceon; }


cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: none SPF=HELO sender=server.sender.example;
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
From:     The (sender <faked@example.com>)
	<postmaster@author.example>
To: whoever is concerned:;
Subject: This may be a complaint
Content-Type: text/plain; charset=us-ascii

hi there!
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2412: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2412"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2412"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
$as_echo "$at_srcdir/testsuite.at:2413: grep 'complaint_flag:' database_dump"
at_fn_check_prepare_trace "testsuite.at:2413"
( $at_check_trace; grep 'complaint_flag:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "complaint_flag: 0
complaint_flag: 2
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2413"
$at_failed && at_fn_log_failure
$at_traceon; }


cat >ctl <<'_ATEOF'
s
Msignmsg
uauthsmtp
iuser@example.com
rrecipient@another.example
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2424: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2424"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2424"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
$as_echo "$at_srcdir/testsuite.at:2425: grep 'complaint_flag:' database_dump"
at_fn_check_prepare_trace "testsuite.at:2425"
( $at_check_trace; grep 'complaint_flag:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "complaint_flag: 0
complaint_flag: 2
complaint_flag: 3
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2425"
$at_failed && at_fn_log_failure
$at_traceon; }


cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2432: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2432"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2432"
$at_failed && at_fn_log_failure
$at_traceon; }


{ set +x
$as_echo "$at_srcdir/testsuite.at:2433: grep 'complaint_flag:' database_dump"
at_fn_check_prepare_trace "testsuite.at:2433"
( $at_check_trace; grep 'complaint_flag:' database_dump
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "complaint_flag: 0
complaint_flag: 2
complaint_flag: 3
complaint_flag: 1
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2433"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_85
#AT_START_86
at_fn_group_banner 86 'testsuite.at:2465' \
  "Verify action_header drop and 127.0.0.255" "      "
at_xfail=no
(
  $as_echo "86. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.0.255 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2481: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2481"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "CRIT:zdkimfilter[0]:Zone list.dnswl.org lookup has invalid IP 127.0.0.255
INFO:zdkimfilter[0]:drop msg,id=verifymsg: drop-me
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "050 Message dropped.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2481"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_86
#AT_START_87
at_fn_group_banner 87 'testsuite.at:2492' \
  "Not dropped if worthiness 1 (signed)" "           "
at_xfail=no
(
  $as_echo "87. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.1 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2510: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2510"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but sender.example is in dnswl (1)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2510"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_87
#AT_START_88
at_fn_group_banner 88 'testsuite.at:2521' \
  "Not dropped if worthiness 1 (not signed)" "       "
at_xfail=no
(
  $as_echo "88. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.1 policy.txt="sender.example and some other stuff"
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2537: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2537"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but sender.example is in dnswl (1)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2537"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_88
#AT_START_89
at_fn_group_banner 89 'testsuite.at:2547' \
  "Not dropped if whitelisted (author signature)" "  "
at_xfail=no
(
  $as_echo "89. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2548: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2548"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2548"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
db_backend test
db_sql_whitelisted author.example:3

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2568: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2568"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but author.example is whitelisted (3)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2568"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_89
#AT_START_90
at_fn_group_banner 90 'testsuite.at:2579' \
  "Not dropped if whitelisted (SPF auth)" "          "
at_xfail=no
(
  $as_echo "90. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2580: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2580"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2580"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
db_backend test
db_sql_whitelisted sender.example:3

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2596: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2596"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but sender.example is whitelisted (3)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2596"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_90
#AT_START_91
at_fn_group_banner 91 'testsuite.at:2606' \
  "Not dropped if whitelisted (SPF auth, signed)" "  "
at_xfail=no
(
  $as_echo "91. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2607: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2607"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2607"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
db_backend test
db_sql_whitelisted sender.example:3

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2627: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2627"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but sender.example is whitelisted (3)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2627"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_91
#AT_START_92
at_fn_group_banner 92 'testsuite.at:2638' \
  "Not dropped if vouched" "                         "
at_xfail=no
(
  $as_echo "92. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
trusted_vouchers author-cert.example

_ZEOF

cat >VBRFILE <<'_ATEOF'
author.example._vouch.author-cert.example all
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2660: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2660"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but author.example is vouched (author-cert.example)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2660"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_92
#AT_START_93
at_fn_group_banner 93 'testsuite.at:2671' \
  "Not dropped if reputed author sig" "              "
at_xfail=no
(
  $as_echo "93. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
do_reputation
reputation_pass -50
reputation_root al.dkim-reputation.org

_ZEOF

cat >REPFILE <<'_ATEOF'
author.example author.example -100
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2694: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2694"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but author.example is in al.dkim-reputation.org (-100)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=-100
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2694"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_93
#AT_START_94
at_fn_group_banner 94 'testsuite.at:2705' \
  "Not dropped if reputed other sig" "               "
at_xfail=no
(
  $as_echo "94. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
do_reputation
reputation_pass -50
reputation_root al.dkim-reputation.org

_ZEOF

cat >REPFILE <<'_ATEOF'
author.example other.example -100
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.0 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >POLICYFILE <<'_ATEOF'
dkim=unknown
_ATEOF

cat >batch <<'_ATEOF'
test2
test3
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2728: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2728"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: drop-me: file name, but author.example is in al.dkim-reputation.org (-100)
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=-100
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2728"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_94
#AT_START_95
at_fn_group_banner 95 'testsuite.at:2739' \
  "Verify action_header reject" "                    "
at_xfail=no
(
  $as_echo "95. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
dnswl_worthiness_pass 4
header_action_is_reject

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.3 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2757: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2757"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: 550 drop-me (was: file name)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 drop-me.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2757"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_95
#AT_START_96
at_fn_group_banner 96 'testsuite.at:2767' \
  "Verify action_header drop and save message" "     "
at_xfail=no
(
  $as_echo "96. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

action_header drop-me
trust_a_r
dnswl_worthiness_pass 4
save_drop .

_ZEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: server.example; dnswl=pass dns.zone=list.dnswl.org
  policy.ip=127.0.2.3 policy.txt="sender.example and some other stuff"
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Drop-Me: file name
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
recipient@1
recipient@2
recipient@3
_ATEOF

cat >batch <<'_ATEOF'
test2
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2788: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2788"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) rep=0
INFO:zdkimfilter[0]:drop msg,id=verifymsg: drop-me
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "050 Message dropped.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2788"
$at_failed && at_fn_log_failure
$at_traceon; }

tail -n +9 zdrop-file_name* > no-preheader

{ set +x
$as_echo "$at_srcdir/testsuite.at:2798: cmp mail no-preheader"
at_fn_check_prepare_trace "testsuite.at:2798"
( $at_check_trace; cmp mail no-preheader
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2798"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_96
#AT_START_97
at_fn_group_banner 97 'testsuite.at:2849' \
  "DMARC non-none policy reported" "                 "
at_xfail=no
(
  $as_echo "97. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=quarantine; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1267195653; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ZmMMHnWo7xMM2V1zZEYWp7jCXHB7hJ/D8TpCleG0SZ8njWjXaspgOtD/F52SJK90G
	 tx3/m0Y3F58NBVjVfTeAq+znjGER6TbwOQQfbpkHb0jvcgrSYCWVcekS7hIlCtT5mF
	 8gZbgYgOo3rIFUy9vdHkse1jzNR8kxrIYv3aZ0tc=
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2853: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2853"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@author.example, stat=0) dmarc:quarantine=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2853"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2854: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:2854"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dkim=pass header.i=@author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2854"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_97
#AT_START_98
at_fn_group_banner 98 'testsuite.at:2863' \
  "DMARC failed quarantine reported" "               "
at_xfail=no
(
  $as_echo "98. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=quarantine; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2867: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2867"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2867"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2868: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2868"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dmarc=fail header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2868"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_98
#AT_START_99
at_fn_group_banner 99 'testsuite.at:2876' \
  "DMARC failed quarantine honored" "                "
at_xfail=no
(
  $as_echo "99. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=quarantine; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2880: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2880"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=quarantine policy for author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2880"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2881: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2881"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dmarc=fail (QUARANTINE) header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2881"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_99
#AT_START_100
at_fn_group_banner 100 'testsuite.at:2889' \
  "DMARC failed reject reported" "                   "
at_xfail=no
(
  $as_echo "100. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2893: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2893"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2893"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2894: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2894"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dmarc=fail header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2894"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_100
#AT_START_101
at_fn_group_banner 101 'testsuite.at:2902' \
  "DMARC failed reject honored" "                    "
at_xfail=no
(
  $as_echo "101. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2906: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2906"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Reject after DMARC policy.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2906"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_101
#AT_START_102
at_fn_group_banner 102 'testsuite.at:2910' \
  "DMARC failed reject honored from database" "      "
at_xfail=no
(
  $as_echo "102. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2911: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2911"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2911"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
db_sql_domain_flags author.example:0:1:1

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received-SPF: pass SPF=HELO sender=server.sender.example;
Authentication-Results: (with a (nested) comment) mail.example.com; none
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2915: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2915"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Reject after DMARC policy.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2915"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_102
#AT_START_103
at_fn_group_banner 103 'testsuite.at:2919' \
  "DMARC failed subdomain honored from database" "   "
at_xfail=no
(
  $as_echo "103. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2920: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2920"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2920"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
db_sql_domain_flags author.example:0:1:1

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2924: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2924"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for subdomain.author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Reject after DMARC policy.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2924"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_103
#AT_START_104
at_fn_group_banner 104 'testsuite.at:2928' \
  "DMARC reject not honored if whitelisted" "        "
at_xfail=no
(
  $as_echo "104. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/testsuite.at:2929: \$HAVE_OPENDBX || exit 77"
at_fn_check_prepare_dynamic "$HAVE_OPENDBX || exit 77" "testsuite.at:2929"
( $at_check_trace; $HAVE_OPENDBX || exit 77
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2929"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc
db_sql_whitelisted sender.example:3


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=HELO sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2935: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2935"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, but sender.example is whitelisted (auth: SPF)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2935"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2937: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2937"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.helo=sender.example;
  dmarc=fail header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2937"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_104
#AT_START_105
at_fn_group_banner 105 'testsuite.at:2945' \
  "DMARC reject not honored if dnswl'd" "            "
at_xfail=no
(
  $as_echo "105. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc
trust_a_r


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Authentication-Results: test.example;
 dnswl=pass dns.zone=list.dnswl.org policy.ip=127.0.10.0
 policy.txt="sender.example http://www.dnswl.example/"
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2951: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2951"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, but I found 1 DNSWL record(s) --sender.example
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2951"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2953: head -n 2 mail"
at_fn_check_prepare_trace "testsuite.at:2953"
( $at_check_trace; head -n 2 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dmarc=fail header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2953"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_105
#AT_START_106
at_fn_group_banner 106 'testsuite.at:2960' \
  "DMARC reject not honored if vouched" "            "
at_xfail=no
(
  $as_echo "106. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc
trusted_vouchers sender-cert.example


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@sender.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >VBRFILE <<'_ATEOF'
sender.example._vouch.sender-cert.example all
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2968: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2968"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, but sender.example is VBR vouched by sender-cert.example (auth: SPF)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2968"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2970: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:2970"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=sender.example;
  dmarc=fail header.from=author.example;
  vbr=pass header.mv=sender-cert.example header.md=sender.example (all)
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2970"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_106
#AT_START_107
at_fn_group_banner 107 'testsuite.at:2979' \
  "DMARC reject honored even if reputed" "           "
at_xfail=no
(
  $as_echo "107. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc
do_reputation
reputation_pass -50
reputation_root al.dkim-reputation.org


_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >REPFILE <<'_ATEOF'
author.example other.example -100
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=other.example; s=x3;
	t=1267197617; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301;
	h=Message-ID:Date:From:MIME-Version:To:Subject:Content-Type:
	 Content-Transfer-Encoding;
	b=ejTAOxjZ1TFzdE0KT0/I/Dd7dL76iPzUq3sc4ngUt/78pFSFSL4p3nXNIMYeGHVT6
	 7kwAhFlmpT0UgBaisyjfyGTgx4k/N2+Kbbne1NV/kYG9wYRylk9fooS08ZRkY7Ieuu
	 K5pYsL12X5UfS1+TRnv2ONLxQDgSn+4r8ZwaEWZ8=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2989: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2989"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, even if author.example is in al.dkim-reputation.org (-100)
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Reject after DMARC policy.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2989"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_107
#AT_START_108
at_fn_group_banner 108 'testsuite.at:2993' \
  "DMARC pass signed by subdomain" "                 "
at_xfail=no
(
  $as_echo "108. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=subdomain.author.example; s=x4; t=1425475173;
	bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=; l=301;
	h=Date:From:To:Subject;
	b=QB5afafnvYV8ML6CPwhzNAAwt7mVdy5zUxqjKWv155g+/bZcZYQjNpj7kIIkTFQ/S
	 XXHm7ajuXdB01ZqQnvfHe6mbDiB4VPReSIKEE8Q4znyoODdWDVmwqVBmmj1YjDHePc
	 0CrmhdsaCX4FW+X8td1hOcopogke4e3CrWy7vr8k=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:2997: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:2997"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: dkim=pass (id=@subdomain.author.example, stat=0) dmarc:reject=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2997"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:2998: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:2998"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim=pass header.i=@subdomain.author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:2998"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_108
#AT_START_109
at_fn_group_banner 109 'testsuite.at:3006' \
  "DMARC pass SPF HELO by subdomain" "               "
at_xfail=no
(
  $as_echo "109. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=HELO sender=someone@subdomain.author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3010: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3010"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3010"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3011: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3011"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.helo=subdomain.author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3011"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_109
#AT_START_110
at_fn_group_banner 110 'testsuite.at:3019' \
  "DMARC pass SPF MAILFROM by subdomain" "           "
at_xfail=no
(
  $as_echo "110. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@subdomain.author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3023: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3023"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3023"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3024: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3024"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=subdomain.author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3024"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_110
#AT_START_111
at_fn_group_banner 111 'testsuite.at:3032' \
  "DMARC pass SPF FROM (non standard) by subdomain" ""
at_xfail=no
(
  $as_echo "111. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=FROM sender=someone@subdomain.author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3036: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3036"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: author.example pass only because BOFHSPFFROM
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3036"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3037: head -n 2 mail"
at_fn_check_prepare_trace "testsuite.at:3037"
( $at_check_trace; head -n 2 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3037"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_111
#AT_START_112
at_fn_group_banner 112 'testsuite.at:3044' \
  "DMARC subdomain signed by domain" "               "
at_xfail=no
(
  $as_echo "112. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
subdomain.author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=author.example; s=x1;
	t=1425636964; bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=;
	l=301; h=Date:From:To:Subject;
	b=Z9W9qCvybTs80lAmboko3ZFAxfYiSJW/l8r7Azpp4BLDrXB3kOYFcERRn6k6L70jv
	 VOj7WwFIbLDHrk5W/XhveRu4lChRqDetyrqy+hOsrYbnJgbOCizi439JtYMub+zTwm
	 d8PidNs04FFInGGUE2zRaD6AT/M+fz5J41uvs3oE=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3048: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3048"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: dkim=pass (id=@author.example, stat=0) dmarc:reject=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3048"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3049: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3049"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim=pass header.i=@author.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3049"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_112
#AT_START_113
at_fn_group_banner 113 'testsuite.at:3057' \
  "DMARC subdomain SPF HELO by domain" "             "
at_xfail=no
(
  $as_echo "113. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=HELO sender=someone@author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3061: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3061"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3061"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3062: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3062"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.helo=author.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3062"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_113
#AT_START_114
at_fn_group_banner 114 'testsuite.at:3070' \
  "DMARC subdomain SPF MAILFROM by domain" "         "
at_xfail=no
(
  $as_echo "114. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3074: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3074"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3074"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3075: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3075"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=author.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3075"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_114
#AT_START_115
at_fn_group_banner 115 'testsuite.at:3083' \
  "DMARC sub SPF FROM (non standard) by domain" "    "
at_xfail=no
(
  $as_echo "115. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.subdomain.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@subdomain.author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=FROM sender=someone@author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3087: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3087"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: subdomain.author.example pass only because BOFHSPFFROM
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3087"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3088: head -n 2 mail"
at_fn_check_prepare_trace "testsuite.at:3088"
( $at_check_trace; head -n 2 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3088"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_115
#AT_START_116
at_fn_group_banner 116 'testsuite.at:3095' \
  "DMARC subdomain signed by subdomain" "            "
at_xfail=no
(
  $as_echo "116. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
subdomain.author.example X
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=subdomain.author.example; s=x4; t=1425636862;
	bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=; l=301;
	h=Date:From:To:Subject;
	b=t1ZnIYMPY41Vq/Gy8S12eTEqBFVa7mkoMj23TZCeuuPadOQN4SEcSHqQ1qTPXzn0b
	 zuy3hJAoIDneoRzgkCAIJAHtX2hZWFBv5FUJ0IvaFpc4TIj6ElJj1oepyUSZ1rYIIA
	 a9ovpSSgMLOnle66Dc6xIGHU3/0PaKIR4zBxTK4k=
]Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3099: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3099"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: dkim=pass (id=@subdomain.author.example, stat=0) dmarc:reject=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3099"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3100: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3100"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  dkim=pass header.i=@subdomain.author.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_116
#AT_START_117
at_fn_group_banner 117 'testsuite.at:3108' \
  "DMARC subdomain SPF by another subdomain" "       "
at_xfail=no
(
  $as_echo "117. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@anothersub.author.example;
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@subdomain.author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3112: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3112"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3112"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3113: head -n 3 mail"
at_fn_check_prepare_trace "testsuite.at:3113"
( $at_check_trace; head -n 3 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=anothersub.author.example;
  dmarc=pass header.from=subdomain.author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3113"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_117
#AT_START_118
at_fn_group_banner 118 'testsuite.at:3126' \
  "DMARC auth by subdomain strict dkim" "            "
at_xfail=no
(
  $as_echo "118. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; adkim=s; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@subdomain.author.example;
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=subdomain.author.example; s=x4; t=1425475173;
	bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=; l=301;
	h=Date:From:To:Subject;
	b=QB5afafnvYV8ML6CPwhzNAAwt7mVdy5zUxqjKWv155g+/bZcZYQjNpj7kIIkTFQ/S
	 XXHm7ajuXdB01ZqQnvfHe6mbDiB4VPReSIKEE8Q4znyoODdWDVmwqVBmmj1YjDHePc
	 0CrmhdsaCX4FW+X8td1hOcopogke4e3CrWy7vr8k=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3130: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3130"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@subdomain.author.example, stat=0) dmarc:reject=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3130"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3131: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:3131"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=subdomain.author.example;
  dkim=pass header.i=@subdomain.author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3131"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_118
#AT_START_119
at_fn_group_banner 119 'testsuite.at:3140' \
  "DMARC auth by subdomain strict spf" "             "
at_xfail=no
(
  $as_echo "119. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; aspf=s; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@subdomain.author.example;
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=subdomain.author.example; s=x4; t=1425475173;
	bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=; l=301;
	h=Date:From:To:Subject;
	b=QB5afafnvYV8ML6CPwhzNAAwt7mVdy5zUxqjKWv155g+/bZcZYQjNpj7kIIkTFQ/S
	 XXHm7ajuXdB01ZqQnvfHe6mbDiB4VPReSIKEE8Q4znyoODdWDVmwqVBmmj1YjDHePc
	 0CrmhdsaCX4FW+X8td1hOcopogke4e3CrWy7vr8k=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3144: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3144"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: verified: spf=pass, dkim=pass (id=@subdomain.author.example, stat=0) dmarc:reject=pass rep=0
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3144"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3145: head -n 4 mail"
at_fn_check_prepare_trace "testsuite.at:3145"
( $at_check_trace; head -n 4 mail
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Authentication-Results: test.example;
  spf=pass smtp.mailfrom=subdomain.author.example;
  dkim=pass header.i=@subdomain.author.example;
  dmarc=pass header.from=author.example
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_119
#AT_START_120
at_fn_group_banner 120 'testsuite.at:3154' \
  "DMARC auth by subdomain strict both" "            "
at_xfail=no
(
  $as_echo "120. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >KEYFILE <<'_ATEOF'
x1._domainkey.author.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
x2._domainkey.sender.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCz8gES8szE0tPe1NgAENU7BoVZHZRhWiPs6MdCCIYJ06RoV9vmAXlXzcHK/IM7fSHVQKYvf1E7dUwQIwCUe5S+qdkB0KxtmzCCBqjqcju8b6EEJb5e6HiMHjErS+33fNtS8qYCQNt1Xl5Ga94o1oXeZxroYSjeps8z82j/JQsPswIDAQAB
x3._domainkey.other.example v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFTpY+8YuikRLRfNLU3krD8h7lNnbK4eZ0TuPfRur6TDEg+bOQD1g1yJ1bnyQ1uCtwEkZ54Zs56C8PVpvU7jjR2/YcS92PiOhm3MXWyD3caekCZ7ezXvEkD/KaTkuKypiTmDlefQ39t5oq60fufb61/lUGzLech/kKLOexYohqEwIDAQAB
x4._domainkey.subdomain.author.example v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHoVBC8uC7kB90cJZBirpAxJjqv5rgWwk7yE9zjWeCsvxqisIP0hLT4ffQFSk6NcnxD6cm67FIOKKSY0jznzvObyqndBn4jNYIcjdfUY+Erq/2dtcKljeYdR63N9QNgP8un4/taLqkNBZ+H3hhFLqY5V65+CnlclAnERcpJ+wl9wIDAQAB
_dmarc.author.example v=DMARC1; p=reject; adkim=s; aspf=s; rua=mailto:dmarc-feedback@author.example
_ATEOF

cat >zftest.conf <<'_ZEOF'
verbose = 3
domain_keys = .
tmp = .

publicsuffix=publicsuffix
db_backend test
db_sql_insert_msg_ref dummy
honor_dmarc

_ZEOF

cat >publicsuffix <<'_ATEOF'
example
_ATEOF

cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Received-SPF: pass SPF=MAILFROM sender=someone@subdomain.author.example;
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
	d=subdomain.author.example; s=x4; t=1425475173;
	bh=L8QGcsUoP9USzqJEAQJWO+T54ucacbfWHYBLHXpfgpM=; l=301;
	h=Date:From:To:Subject;
	b=QB5afafnvYV8ML6CPwhzNAAwt7mVdy5zUxqjKWv155g+/bZcZYQjNpj7kIIkTFQ/S
	 XXHm7ajuXdB01ZqQnvfHe6mbDiB4VPReSIKEE8Q4znyoODdWDVmwqVBmmj1YjDHePc
	 0CrmhdsaCX4FW+X8td1hOcopogke4e3CrWy7vr8k=
Received: from mail.example.com by server.example with ESMTPA
Message-ID: <123456@author.example>
Date: Mon, 08 Feb 2010 13:12:55 +0100
From: Author <user@author.example>
VBR-Info: mc=all; md=author.example; mv=author-cert.example
VBR-Info: mc=all; md=sender.example; mv=sender-cert.example
MIME-Version: 1.0
To: (undisclosed recipients)
Subject: Test multiple signatures
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is going to be signed by multiple signers:
author, sender, and other. The filter only reports
one signature: the first valid one in the order
1) author,
2) sender, and
3) other

Note that to distinguish the sender we need a valid
SPF record. We relay on Courier's SPF checking for that.
_ATEOF

cat >ctl <<'_ATEOF'
sbounces@server.example
Mverifymsg
usmtp
fdns; [192.0.2.254] (server.example [192.0.2.1])
_ATEOF

cat >batch <<'_ATEOF'
sighup
test2
test4
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3158: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3158"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:New config file read from zftest.conf
INFO:zdkimfilter[0]:id=verifymsg: dmarc=reject policy for author.example, no VBR and no whitelist
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "550 Reject after DMARC policy.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3158"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_120
#AT_START_121
at_fn_group_banner 121 'testsuite.at:3164' \
  "Check wrapping long lines on signing" "           "
at_xfail=no
(
  $as_echo "121. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >zftest.conf <<'_ZEOF'
verbose = 6
domain_keys = .
tmp = .

default_domain example.com

_ZEOF

cat >example.com <<'_ATEOF'
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqlye7m5zLLXoIpBp2OO05LNMqKu0zKowoHOpyRpviOVqOaNCk
5uZ+wY00JwrKbt5u1G1ghuXsFkFkl0h00LBurz7ivyZH3LohSWOZ8okgR+8kuGu9
GHtQ+MqgRd16tlCF8PlWS2kGaBQKua1zk+ZCDwFy82Uo5G21nu/+Nn2sUwIDAQAB
AoGARPaCa4eHJWQnF2MwB2cQD7MdUsizx6GFs5ms9bGxxwyknTmmT2PA/rFEYjb+
V8PmTCu4Y/Nk88IzgXTfJ8pN6GfnN1O0qMTUoMuHTf/LMWT/WsFstjiuuFCQddBz
xVyup6Rnl30mYU5WE0PheUTG0AVbzMn2Aj/SEYXlEYPnENECQQDbsLlcEitqnj+i
ipFz9H5RnfoDC4pFHSSqMlddYIA9e2DoNdxjU275eyt2g2p9hQMMXdB7LnoyFeHz
jeRpK3RlAkEAxsj5uOvBctleM2ERPPXTm0nYUWSH4aPZkE/olThgQMogTwSQc6vI
M6RkzKfF5Dr5g/b2kyoZhxIvdtUcPzfGVwJBALrZaA3C9mJMDdt095kjzXwlXMrS
OdvmmZSYFG468VdZZGabyMJB6BUQiTrXMu9m/dy6veLG+O84ZWD8wdQhPXECQBf4
nlyVWXOfEMQDXY/LWSQtyH8wL06fcpn7eOGdtcW6WiENPNomCfNoTJt9U9jM38/x
FRT0C7YFFGIxGsHo2OsCQF2PGJ3yKn2l9VX+M6qj4hE+POdgnJLqNMp5kRIBj9De
rlKqG0nWxNFVhVzXsgeNUTDCmVm3cdODa94wXn9WNvY=
-----END RSA PRIVATE KEY-----
_ATEOF



cat >mail <<'_ATEOF'
Received: from server.example by test.example with ESMTP
Message-ID: <123456@author.example>
Date: Fri, 10 Apr 2015 19:35:00 +0200
From: Author One <user@author.example>,user2@author.example(Author Two), user3@author.example
MIME-Version: 1.0
To  : (XYZ) x@y.z, and a bunch of people: Rc1 <rc1@dest.example>, Rc2 <rc2@dest.example>, Rc3 <rc3@dest.example>;
Reply-To:
 Author
  One
   <user@author.example>       ,
    user2@author.example
     (Author Two),
         user3@author.example
Subject: Test address wrapping
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

The header will be wrapped before being signed!
_ATEOF

cat >ctl <<'_ATEOF'
Msignmsg
uauthsmtp
iuser
_ATEOF

cat >batch <<'_ATEOF'
mail
ctl



exit
_ATEOF

{ set +x
$as_echo "$at_srcdir/testsuite.at:3195: \$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch"
at_fn_check_prepare_dynamic "$VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch" "testsuite.at:3195"
( $at_check_trace; $VALGRIND_AND_OPTS zdkimfilter -f zftest.conf --batch-test <batch
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; $as_echo "INFO:zdkimfilter[0]:id=signmsg: signing for user with domain example.com, selector s
INFO:zdkimfilter[0]:id=signmsg: response: 250 Ok.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "250 Ok.
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3195"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/testsuite.at:3203: head -17 mail | tail -11"
at_fn_check_prepare_notrace 'a shell pipeline' "testsuite.at:3203"
( $at_check_trace; head -17 mail | tail -11
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; $as_echo "Received: from server.example by test.example with ESMTP
Message-ID: <123456@author.example>
Date: Fri, 10 Apr 2015 19:35:00 +0200
From: Author One <user@author.example>,
  user2@author.example (Author Two), user3@author.example
MIME-Version: 1.0
To: x@y.z (XYZ), and a bunch of people: Rc1 <rc1@dest.example>,
  Rc2 <rc2@dest.example>, Rc3 <rc3@dest.example>;
Reply-To: Author One <user@author.example>,
  user2@author.example (Author Two), user3@author.example
Subject: Test address wrapping
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/testsuite.at:3203"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_121
